#!/usr/bin/fish

# Improvements:
# -------------
# - Change password
# - Fix exit code when deleting a file that is not there
# - Multiple attempt at getting password correct

function help_exit
    echo "Usage: diary [options] [file] ...
Securely create, edit, view and delete diary entries
Options:
  -c, --create=<file>        Create a new diary at the specified location
  -f, --file=<diary-file>    The diary file to use
  -d, --diary                Create a new diary entry
  -l, --list                 List all the files in the diary
  -r, --remove=<file>        Remove the specified file in the diary
  -v, --view                 View the files specified
  -h, --help                 Show this help and exit

If a diary file is not provided, use the diary at \$HOME/.local/share/diary by default

Examples:
  # Create a new diary called mydiary in the current directory
  diary -c mydiary

  # Create a new diary entry - the filename will be today's date (edit if file
  # already exists). The editor used to open the file is taken from the EDITOR
  # environment variable.
  diary -f mydiary -d

  # Create a new file called secret.txt (or edit if it already exists)
  diary -f mydiary secret.txt

  # List the files inside the diary
  diary -f mydiary -l

  # Remove the file 28-05-16.txt
  diary -f mydiary -r 28-05-16.txt

  # View the entry from christmas 15 and 16
  diary -f mydiary -v 25-12-15.txt 25-12-16.txt"

    exit 1
end

function create_diary
    # Create a new diary containg a single file '.diary'
    # Usage: create_diary [file]
    set temp_dir (mktemp -d)

    touch $temp_dir/.diary

    read_passwd "diary: enter a new password: "
    set first_passwd $passwd
    read_passwd "diary: confirm password: "

    if test $passwd = $first_passwd
        if lock_diary "$temp_dir" "$argv" "$passwd"
            set exit_code 0
        else
            echo "diary: error creating file at $argv"
            set exit_code 1
        end
    else
        echo "diary: passwords did not match, aborting"
        set exit_code 1
    end

    rm -rf $temp_dir

    exit $exit_code
end

function read_passwd
    # Display a message and read a password from stdin, then put it in $passwd
    # Usage: read_passwd [message]
    echo -n $argv
    # Use bash to can use silent mode (characters are not shown as you type
    # password - unfortunately it seems you cannot do this with fish's read)
    set -g passwd (bash -c "read -s p && echo \$p")
    echo ""
end

function unlock_diary
    # Unlock a given diary with the given password, and put the temp diary's
    # location in $temp_diary. Return 0 if successful, 1 otherwise
    # Usage: unlock_diary [diary_file] [password]

    set temp_dir (mktemp -d)
    set temp_tar "$temp_dir/temp.tar"

    if gpg --no-tty --passphrase "$argv[2]" -o "$temp_tar" -d "$argv[1]" > /dev/null ^&1

        if tar --directory=$temp_dir -xf $temp_tar
            # Successful - set $temp_diary and return 0
            rm $temp_tar

            set -g temp_diary $temp_dir
            return 0
        else

            # Error un-taring - return 1
            rm -rf {$temp_dir,$temp_tar}
            return 1
        end
    else
        # Something went wrong, delete temp file and return 1
        rm -rf {$temp_dir,$temp_tar}
        return 1
    end
end

function lock_diary
    # 'Lock' the open diary at the given temp location with the given password,
    # saving to the proper place. Return 0 if successful, something else otherwise
    # Usage: lock_diary [temp_diary_directory] [diary_file] [password]
    set temp_tar (mktemp)
    tar --directory=$argv[1] -cf $temp_tar .
    gpg --batch --yes --passphrase "$argv[3]" -o $argv[2] -c $temp_tar > /dev/null ^&1
    set exit_code $status
    rm $temp_tar
end

# Use getopt to parse command line options easily
set args (getopt -q -s "sh" -o "c:f:dlr:vh" -l "create:,file:,diary,list,remove:,view,help" -- $argv); or help_exit
set args (fish -c "for el in $args; echo -E \$el; end")

# To hold the positional arguments (after "--" in args)
set pargs

# Loop through the args
set i 1
set c (count $args)
while math "$i <= $c" > /dev/null
    switch $args[$i]
        case "-c" "--create"
            # Increment i to get the argument to -c
            set i (math "$i + 1")
            create_diary $args[$i]

        case "-f" "--file"
            set i (math "$i + 1")
            set diary_file $args[$i]

        case "-d" "--diary"
            set create_diary_entry
            set something_to_do

        case "-l" "--list"
            set list_files
            set something_to_do

        case "-r" "--remove"
            set i (math "$i + 1")
            set file_to_remove $args[$i]
            set something_to_do

        case "-v" "--view"
            set view_files
            # Using -v does nothing on its own (need stuff in pargs) so we do
            # not set something_to_do here

        case "-h" "--help"
            help_exit

        case "--"
            set options_finished

        case "*"
            # Should only be here after "--"...
            if set -q options_finished
                set pargs $pargs $args[$i]
                set something_to_do
            end
    end

    # Increase counter
    set i (math "$i + 1")
end

# If there is nothing to do we can quit early
if not set -q something_to_do
    echo "diary: nothing to do!"
    help_exit
end

# If diary_file has not been set use default diary at $HOME/.local/share/diary
if not set -q diary_file
    echo "diary: Using default diary at $HOME/.local/share/diary"
    set diary_file $HOME/.local/share/diary
end

# Check the diary file exists and is a file
if test ! \( -f $diary_file \)
    echo "diary: file '$diary_file' does not exist"
    exit 1
end

set exit_code 0

# Get password in $passwd
read_passwd "diary: password for '$diary_file': "

# Unlock the diary - this puts the unlocked diary location in $temp_diary
unlock_diary "$diary_file" "$passwd"

# If the unlock was successful...
if set -q temp_diary

    set exit_code 0

    if set -q list_files
        echo "diary: '$diary_file' contains:"
        ls $temp_diary

    else if set -q file_to_remove
        if test -f $temp_diary/$file_to_remove
            rm $temp_diary/$file_to_remove
            set exit_code $status
        else
            echo "diary: file '$file_to_remove' does not exist"
            set exit_code 1
        end

    else if set -q view_files
        for file in $pargs
            # cat each file to the screen if it exists
            if test -f $temp_diary/$file
                echo "$file:"
                cat $temp_diary/$file
                echo -e "\n"
            else
                echo "diary: file '$file' does not exist"
            end
        end

    else
        # Here we will be creating/editing a file
        # The filename will be $pargs[1] or today's date if -d has been used
        if set -q create_diary_entry
            set filename (date +%d-%m-%y)".txt"
        else
            # Note that $pargs[1] is guaranteed to exist because of the
            # 'something_to_do' check above
            set filename $pargs[1]
        end

        # If file does not exist then create it
        if test ! \( -e $temp_diary/$filename \)
            touch $temp_diary/$filename
        end

        set temp_file (mktemp)
        cp $temp_diary/$filename $temp_file

        # The diary should be locked when a file is being edited, since
        # otherwise the diary could be unlocked for a long time, and any
        # other user could read your diary!
        lock_diary "$temp_diary" "$diary_file" "$passwd"
        rm -rf "$temp_diary"

        echo "Opening '$filename'..."
        eval $EDITOR $temp_file

        # Here we don't expect unlock_diary to fail since it worked earlier...
        # (I think the only way for this to fail is if you mess around with
        # the diary file whilst editing - e.g. rename it, change password etc)
        unlock_diary "$diary_file" "$passwd"

        # Move the temp file to the diary and give it its proper name
        cp $temp_file "$temp_diary/$filename"
        set exit_code $status
        rm $temp_file
    end

    lock_diary "$temp_diary" "$diary_file" "$passwd"
    rm -r $temp_diary
    exit $exit_code

else
    echo "diary: error unlocking '$diary_file'"
    exit 1
end
